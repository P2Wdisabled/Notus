generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int             @id @default(autoincrement())
  email                    String          @unique
  username                 String?         @unique
  password_hash            String?
  first_name               String?
  last_name                String?
  email_verified           Boolean         @default(false)
  email_verification_token String?
  provider                 String?
  provider_id              String?
  created_at               DateTime        @default(now())
  updated_at               DateTime        @updatedAt
  reset_token              String?
  reset_token_expiry       DateTime?
  is_admin                 Boolean         @default(false)
  is_banned                Boolean         @default(false)
  terms_accepted_at        DateTime?
  profile_image            String?
  banner_image             String?
  documents                Document[]
  user_sessions            user_sessions[]

  @@index([email], map: "idx_users_email")
  @@index([provider, provider_id], map: "idx_users_provider")
  @@index([username], map: "idx_users_username")
  @@map("users")
}

model Document {
  id         Int      @id @default(autoincrement())
  user_id    Int
  title      String
  content    String   @default("")
  tags       String[] @default([])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Share      Share[]

  @@index([created_at(sort: Desc)], map: "idx_documents_created_at")
  @@index([user_id], map: "idx_documents_user_id")
  @@map("documents")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Share {
  id         Int      @id @default(autoincrement())
  id_doc     Int
  email      String
  permission Boolean  @default(false)
  document   Document @relation(fields: [id_doc], references: [id], onDelete: Cascade)

  @@unique([id_doc, email], map: "uq_shares_id_doc_email")
  @@index([email], map: "idx_shares_email")
  @@map("shares")
}

model user_sessions {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  token_hash String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_sessions_user_id")
}

model TrashDocument {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  title      String
  content    String   @default("")
  tags       String[] @default([])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime @default(now())
  original_id Int?

  @@map("trash_documents")
}