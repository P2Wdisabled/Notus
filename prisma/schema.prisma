// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                       Int       @id @default(autoincrement())
  name                     String?
  email                    String    @unique
  
  // Champs personnalisés de votre application
  username                 String?   @unique
  first_name                String?   @map("first_name")
  last_name                 String?   @map("last_name")
  password_hash             String?   @map("password_hash")
  is_admin                  Boolean   @default(false) @map("is_admin")
  email_verified           Boolean   @default(false)
  provider                 String?
  provider_id              String?
  is_banned                 Boolean   @default(false) @map("is_banned")
  created_at                DateTime  @default(now()) @map("created_at")
  updated_at                DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Champs supplémentaires de l'application existante
  email_verification_token String?
  reset_token              String?
  reset_token_expiry       DateTime?
  terms_accepted_at        DateTime?
  profile_image            String?
  banner_image             String?

  // Relations personnalisées
  documents Document[]
  adminActions AdminAction[] @relation("AdminActions")
  targetUserActions AdminAction[] @relation("TargetUserActions")

  @@map("users")
}

model Document {
  id         Int      @id @default(autoincrement())
  user_id    Int      @map("user_id")
  title      String
  content    String   @default("")
  tags       String[] @default([])
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  // Relations
  user  User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Share Share[]

  @@map("documents")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Share {
  id         Int     @id @default(autoincrement())
  id_doc     Int     @map("id_doc")
  email      String
  permission Boolean @default(false)

  document Document @relation(fields: [id_doc], references: [id], onDelete: Cascade)

  @@map("shares")
}

model AdminAction {
  id             Int      @id @default(autoincrement())
  admin_id       Int      @map("admin_id")
  target_user_id Int      @map("target_user_id")
  action_type    String   @map("action_type") // 'ban', 'unban', 'promote_admin', 'demote_admin'
  reason         String?
  details        Json?    // Pour stocker des informations supplémentaires
  created_at     DateTime @default(now()) @map("created_at")

  // Relations
  admin       User @relation("AdminActions", fields: [admin_id], references: [id], onDelete: Cascade)
  target_user User @relation("TargetUserActions", fields: [target_user_id], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

model TrashDocument {
  id         Int      @id @default(autoincrement())
  original_id Int?
  user_id    Int
  title      String
  content    String   @default("")
  tags       String[] @default([])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime @default(now())

  @@map("trash_documents")
}

model Notification {
  id         Int      @id @default(autoincrement())
  id_sender   Int?
  id_receiver Int
  message     Json
  send_date   DateTime @default(now())
  read_date   DateTime?

  @@index([id_receiver], map: "idx_notifications_receiver")
  @@map("notifications")
}