name: Notus CI/CD

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CI: true

jobs:
  quality:
    name: Lint / Typecheck / Tests (Node 22.x)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint (if present)
        run: npm run lint --if-present

      - name: Typecheck (tsc)
        run: |
          if npm run -s typecheck >/dev/null 2>&1; then
            npm run typecheck
          else
            npx tsc --noEmit
          fi

      - name: Run tests (if present)
        run: npm test --if-present -- --ci

  build:
    name: Build (Next + Turbopack)
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Cache Next build
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', '**/*.css') }}
          restore-keys: |
            next-${{ runner.os }}-

      - name: Build project
        run: npm run build

  deploy:
    name: Deploy via SSH (password) + PM2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production

    steps:
      - uses: actions/checkout@v4

      - name: Install sshpass and rsync
        run: |
          sudo apt-get update -y
          sudo apt-get install -y sshpass rsync

      - name: Rsync project to server (sans node_modules/.git/.github/.next)
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e rsync -az --delete \
            --exclude ".git" --exclude ".github" --exclude "node_modules" --exclude ".next" \
            -e "ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REMOTE_PATH }}/

      - name: Remote install + prisma migrate + build + PM2 reload
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
              set -e
              cd "${{ secrets.REMOTE_PATH }}"

              # Variables d'environnement optionnelles
              if [ -n "${{ secrets.ENV_VARS }}" ]; then export ${{ secrets.ENV_VARS }}; fi

              # Installer les dépendances prod
              npm ci --omit=dev

              # Prisma
              npx prisma generate
              npx prisma migrate deploy

              # Build côté serveur (alignement arch/env)
              npm run build

              # PM2
              if pm2 describe "${{ secrets.PM2_APP }}" >/dev/null 2>&1; then
                pm2 reload "${{ secrets.PM2_APP }}"
              else
                pm2 start ecosystem.config.cjs --only "${{ secrets.PM2_APP }}"
              fi
              pm2 save
          EOF
