name: Notus CI/CD

on:
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: true

jobs:
  pipeline:
    name: install → test → lint → build → deploy → prisma → restart
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      # 1) Install
      - name: npm i
        run: npm i

      # 2) Tests (si présents)
      - name: npm test
        run: npm test --if-present -- --ci

      # 3) Lint (si présent)
      - name: npm run lint
        run: npm run lint --if-present

      # 4) Build
      - name: npm run build
        run: npm run build

      # 5) Déploiement (ssh + rsync)
      - name: Install sshpass & rsync
        run: |
          sudo apt-get update -y
          sudo apt-get install -y sshpass rsync

      - name: rsync to server
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e rsync -az --delete \
            --exclude ".git" --exclude ".github" --exclude "node_modules" --exclude ".next" \
            -e "ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REMOTE_PATH }}/

      # 6) Prisma (generate + migrate) + 7) Restart PM2
      - name: prisma deploy + pm2 reload (remote)
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
              set -e
              cd "${{ secrets.REMOTE_PATH }}"

              # Vars d'env optionnelles
              if [ -n "${{ secrets.ENV_VARS }}" ]; then export ${{ secrets.ENV_VARS }}; fi
              # [ -n "${{ secrets.ENV_FILE_PROD }}" ] && echo "${{ secrets.ENV_FILE_PROD }}" > .env.production

              # Déps prod (au cas où des diffs de lock)
              npm i --omit=dev

              # Prisma
              npx prisma generate
              npx prisma migrate deploy

              # Rebuild côté serveur (cohérence env/arch Next 15)
              npm run build

              # PM2
              if pm2 describe "${{ secrets.PM2_APP }}" >/dev/null 2>&1; then
                pm2 reload "${{ secrets.PM2_APP }}"
              else
                pm2 start ecosystem.config.cjs --only "${{ secrets.PM2_APP }}"
              fi
              pm2 save
          EOF
