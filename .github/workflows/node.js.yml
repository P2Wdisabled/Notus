name: Notus CI/CD (stages)

on:
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: true

jobs:
  install:
    name: 1) install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json
      - name: npm i
        run: npm i
      - name: Pack deps
        run: tar czf deps.tgz node_modules package-lock.json
      - uses: actions/upload-artifact@v4
        with:
          name: deps
          path: deps.tgz
          retention-days: 1

  test:
    name: 2) test
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - uses: actions/download-artifact@v4
        with:
          name: deps
      - run: tar xzf deps.tgz
      - name: npm test (if present)
        run: npm test --if-present -- --ci

  lint:
    name: 3) lint
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - uses: actions/download-artifact@v4
        with:
          name: deps
      - run: tar xzf deps.tgz
      - name: npm run lint (if present)
        run: npm run lint --if-present

  build:
    name: 4) build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - uses: actions/download-artifact@v4
        with:
          name: deps
      - run: tar xzf deps.tgz
      - name: Cache Next build
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', '**/*.css') }}
          restore-keys: |
            next-${{ runner.os }}-
      - name: npm run build
        run: npm run build

  deploy:
    name: 5) deploy (rsync)
    runs-on: ubuntu-latest
    needs: build
    environment: prod
    steps:
      - uses: actions/checkout@v4

      # ---- Masquage des secrets globaux (SSH/PM2/chemins) ----
      - name: Mask SSH & PM2 secrets
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          PM2_APP: ${{ secrets.PM2_APP }}
        run: |
          for v in SSH_HOST SSH_USER SSH_PORT SSH_PASSWORD REMOTE_PATH PM2_APP; do
            val="${!v}"
            if [ -n "$val" ]; then
              echo "::add-mask::$val"
            fi
          done

      - name: Install sshpass & rsync
        run: |
          sudo apt-get update -y
          sudo apt-get install -y sshpass rsync

      - name: Check secrets & set defaults
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          PM2_APP: ${{ secrets.PM2_APP }}
        run: |
          set -e
          for v in SSH_HOST SSH_USER SSH_PASSWORD REMOTE_PATH PM2_APP; do
            if [ -z "${!v}" ]; then
              echo "::error ::Missing required secret: $v"; exit 1
            fi
          done
          echo "PORT=${SSH_PORT:-22}" >> "$GITHUB_ENV"

      - name: Rsync source to server
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          sshpass -e rsync -az --delete \
            --exclude ".git" --exclude ".github" --exclude "node_modules" --exclude ".next" \
            -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
            ./ "${SSH_USER}@${SSH_HOST}:${REMOTE_PATH}/"

  prisma:
    name: 6) prisma (generate + migrate + build)
    runs-on: ubuntu-latest
    needs: deploy
    environment: prod
    steps:
      # ---- Masquage proactif des valeurs de .env (depuis ENV_FILE_PROD) ----
      - name: Mask .env values (from ENV_FILE_PROD)
        env:
          ENV_FILE_PROD: ${{ secrets.ENV_FILE_PROD }}
        run: |
          # Parse le contenu du .env fourni dans le secret et masque chaque valeur
          tmp="$(mktemp)"
          printf '%s\n' "$ENV_FILE_PROD" > "$tmp"
          sed -i 's/\r$//' "$tmp"
          while IFS='=' read -r k v; do
            # ignore lignes vides, comments
            if [ -z "$k" ] || [ "${k#\#}" != "$k" ]; then continue; fi
            # strip quotes
            v="${v%\"}"; v="${v#\"}"; v="${v%\'}"; v="${v#\'}"
            if [ -n "$v" ]; then
              echo "::add-mask::$v"
            fi
          done < "$tmp"

          # Bonus: si DATABASE_URL présent, masque aussi les morceaux utiles
          dburl="$(grep -E '^DATABASE_URL=' "$tmp" | sed -E 's/^DATABASE_URL=//; s/^"//; s/"$//; s/^'\''//; s/'\''$//' )"
          if [ -n "$dburl" ]; then
            echo "::add-mask::$dburl"
            proto="${dburl%%://*}://"; rest="${dburl#*://}"
            userpasshostdb="${rest%%\?*}"
            userpass="${userpasshostdb%@*}"; hostdb="${userpasshostdb#*@}"
            user="${userpass%%:*}"; pass="${userpass#*:}"
            host="${hostdb%%/*}"; db="${hostdb#*/}"
            for piece in "$user" "$pass" "$host" "$db" "${proto}${user}@${host}/${db}"; do
              [ -n "$piece" ] && echo "::add-mask::$piece"
            done
          fi
          rm -f "$tmp"

      - name: Mask SSH & PM2 secrets
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          PM2_APP: ${{ secrets.PM2_APP }}
          ENV_VARS: ${{ secrets.ENV_VARS }}
        run: |
          for v in SSH_HOST SSH_USER SSH_PORT SSH_PASSWORD REMOTE_PATH PM2_APP ENV_VARS; do
            val="${!v}"
            if [ -n "$val" ]; then
              echo "::add-mask::$val"
            fi
          done

      - name: prisma + build on server (safe output)
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          ENV_VARS: ${{ secrets.ENV_VARS }}
          ENV_FILE_PROD: ${{ secrets.ENV_FILE_PROD }}
        run: |
          PORT="${SSH_PORT:-22}"
          sshpass -e ssh -p "${PORT}" -o StrictHostKeyChecking=no "${SSH_USER}@${SSH_HOST}" '
            set -e
            cd "'"${REMOTE_PATH//\'/\'\\\'\'}"'"

            # 0) Redactor: fonction qui filtre toutes les sorties (filet de sécurité)
            redact() {
              sed -E \
                -e "s#(postgres(ql)?://)[^ @\"]+#\1***REDACTED***#g" \
                -e "s#(mysql://)[^ @\"]+#\1***REDACTED***#g" \
                -e "s/(user=|password=|host=|database=)[^ \"&]+/\1***REDACTED***/g"
            }

            # 1) Ecrire + charger .env (sans jamais l afficher)
            if [ -n "'"${ENV_FILE_PROD//\'/\'\\\'\'}"'" ]; then
              printf "%s\n" "'"${ENV_FILE_PROD//\'/\'\\\'\'}"'" > .env
              sed -i "s/\r$//" .env
              echo "Created .env from ENV_FILE_PROD"
            fi
            if [ -f .env ]; then
              set -a; . ./.env; set +a
              echo ".env loaded into environment"
            fi
            if [ -n "'"${ENV_VARS//\'/\'\\\'\'}"'" ]; then
              # shellcheck disable=SC2086
              export '"${ENV_VARS}"'
              echo "Exported ENV_VARS"
            fi

            # 2) Installer avec devDeps (build Next en a besoin)
            unset npm_config_production || true
            npm ci --include=dev 2>&1 | redact

            # 3) Prisma (aucune URL ne doit s imprimer)
            if [ -z "${DATABASE_URL:-}" ]; then
              echo "ERROR: DATABASE_URL manquante." >&2; exit 1
            fi
            PRISMA_HIDE_UPDATE_MESSAGE=1 \
            npx prisma generate 2>&1 | redact
            PRISMA_HIDE_UPDATE_MESSAGE=1 \
            npx prisma db push 2>&1 | redact

            # 4) Build Next
            npm run build 2>&1 | redact

            # 5) Alléger après build (optionnel)
            npm prune --omit=dev 2>&1 | redact || true
          '

  restart:
    name: 7) restart (PM2 reload)
    runs-on: ubuntu-latest
    needs: prisma
    environment: prod
    steps:
      - name: pm2 reload
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          PM2_APP: ${{ secrets.PM2_APP }}
        run: |
          PORT="${SSH_PORT:-22}"
          sshpass -e ssh -p "${PORT}" -o StrictHostKeyChecking=no "${SSH_USER}@${SSH_HOST}" "
            set -e
            cd '${REMOTE_PATH}'
            if pm2 describe '${PM2_APP}' >/dev/null 2>&1; then
              pm2 reload '${PM2_APP}'
            else
              pm2 start ecosystem.config.cjs --only '${PM2_APP}'
            fi
            pm2 save
          "
