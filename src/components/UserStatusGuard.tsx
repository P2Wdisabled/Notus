"use client";

import { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import { useRouter, usePathname } from "next/navigation";
import { signOut } from "next-auth/react";
import { clearUserSession } from "@/lib/session-utils";
import BannedUserModal from "./BannedUserModal";

interface UserStatusGuardProps {
  children: React.ReactNode;
}

export default function UserStatusGuard({ children }: UserStatusGuardProps) {
  const { data: session, status } = useSession();
  const router = useRouter();
  const pathname = usePathname();
  const [showBannedModal, setShowBannedModal] = useState(false);
  const [banReason, setBanReason] = useState<string>("");
  const [hasShownModal, setHasShownModal] = useState(false);

  useEffect(() => {
    if (status === "loading") return; // Attendre que la session soit charg√©e

    // Si l'utilisateur n'est pas connect√©, nettoyer sa userSession
    if (status === "unauthenticated") {
      if (typeof window !== "undefined") {
        const userSession = localStorage.getItem("userSession");
        if (userSession) {
          console.log("üßπ Utilisateur non connect√© d√©tect√©, nettoyage de userSession...");
          clearUserSession();
        }
      }
      return;
    }

    // V√©rifier si l'utilisateur est connect√© et banni
    if (session?.user?.isBanned && !hasShownModal) {
      // D√©connecter imm√©diatement l'utilisateur banni
      const handleBannedUser = async () => {
        try {
          // Supprimer la session du localStorage et sessionStorage
          clearUserSession();
          
          // V√©rifier que le localStorage est bien nettoy√©
          if (typeof window !== "undefined") {
            const userSession = localStorage.getItem("userSession");
            const currentUserId = localStorage.getItem("currentUserId");
            console.log("üßπ Nettoyage localStorage - userSession:", userSession ? "pr√©sent" : "supprim√©");
            console.log("üßπ Nettoyage localStorage - currentUserId:", currentUserId ? "pr√©sent" : "supprim√©");
            
            if (userSession) {
              console.log("‚ö†Ô∏è userSession encore pr√©sent, suppression forc√©e...");
              localStorage.removeItem("userSession");
            }
            if (currentUserId) {
              console.log("‚ö†Ô∏è currentUserId encore pr√©sent, suppression forc√©e...");
              localStorage.removeItem("currentUserId");
            }
          }
          
          // D√©connecter l'utilisateur
          await signOut({ redirect: false });
          
          // Afficher le modal de notification
          setBanReason("Votre compte a √©t√© suspendu par un administrateur.");
          setShowBannedModal(true);
          setHasShownModal(true);
        } catch (error) {
          console.error("Erreur lors de la d√©connexion de l'utilisateur banni:", error);
          setBanReason("Votre compte a √©t√© suspendu par un administrateur.");
          setShowBannedModal(true);
          setHasShownModal(true);
        }
      };
      
      handleBannedUser();
      return;
    }

    // Si l'utilisateur n'est pas banni mais essaie d'acc√©der √† /banned, rediriger vers l'accueil
    if (pathname === "/banned" && session?.user && !session.user.isBanned) {
      router.push("/");
      return;
    }
  }, [session, status, pathname, router, hasShownModal]);

  // Si l'utilisateur est banni, afficher le modal
  if (showBannedModal) {
    return (
      <BannedUserModal
        isOpen={showBannedModal}
        onClose={() => {
          setShowBannedModal(false);
          // Rediriger vers l'accueil apr√®s fermeture du modal
          router.push("/");
        }}
        reason={banReason}
      />
    );
  }

  // Sinon, afficher le contenu normal
  return <>{children}</>;
}
